Matthew Jones
COMP 116
12 December, 2018


README -
    The README for Tufts' Fall 2018 COMP 116 Final Project.


About the project -
    This project discusses the issues with current passwords systems, specifically how users create very weak passwords
while randomly-generated computer passwords are difficult for users to remember. More of these details can be found in
the report. The code in this project implements a (very simple) system to help bridge this gap.


Program Requirements -
  - To run the program in this system, you will need to be able to run Python3, with the librarys hashlib, numpy, random, and sys.
  - All of the .txt files must be in the same folder as the .py file, 'passwords.py'
  - That's it. You can run the program from a Python IDE or from the command line.


The system -
    In this program, passwords are made up of words, not just letters. Specifically, each password is 5 randomly
chosen words from a list, in a random order. Passwords are always computer-generated, except for the test account, which
I set up manually. The process for encrypting a password involves a few steps:
 - First, split the string password by space characters, and convert all upper case letters to lower case.
 - Test each word (no spaces, now) for existence in our word list. If a word does not exist, password is not valid.
     This step also tests for SQL keywords in passwords, to help detect SQL injection.
 - Capitalize the first letter of each word (the first character after each space). Remove spaces and add the salt.
 - Encrypt the password using sha256.
By using words, the random passwords can retain a large amount of entropy, but also be more memorable than a random
string of characters with the same entropy (such as x5VC8AdrRj). The approach to testing a password ensures that we
never perform a query that contains a space, which helps a bit with SQL injection, and is fast (logarithmic in the size
of users and word options, and could be made simply linear with word length if we were dealing with many more).


Running the program -
    You should have the files 'passwords.py', 'passes.txt', 'initial.txt', 'words.txt', and 'sqlreserves.txt' in the
same directory. From that directory, run 'python3 passwords.py'.
    To restore the usernames and passwords to the list in 'initial.txt', run 'python3 passwords.py reset'


Files -
 - README.txt      - This README.
 - words.txt       - A list of words, each on a single line. Represent the words that can compose passwords.
                     DO NOT EDIT THIS FILE.
 - sqlreserves.txt - A list of words, each on a single line. Represent SQL keywords. DO NOT EDIT THIS FILE.
 - passes.txt      - A list of credentials, each on a single line. Separated by spaces, order is username, salt,
                     password hash. DO NOT EDIT THIS FILE. (The program can edit this file, though)
 - initial.txt     - A list of credentials. Used as a backup for the initial state of passes.txt. DO NOT EDIT THIS FILE.
 - passwords.py    - The functionality of the program. Structure will be discussed later. DO NOT EDIT THIS FILE.
 - safety.zip      - A zip file, containing an initial copy of each of the above programs, should they be accidentally
                     edited and must be restored.


Using the program -
The best way to understand how the system operates on the surface is to simply try it, by running 'python3 passwords.py'
There are initially 6 users, at the first run of the program:
 Barack_Obama : pheasant clothing humble decent computer
 Donald_Trump : class investment code ground green
 Joe_Biden : knight tattoo spread weekly colorful
 Matthew_Jones : our blue egghead scholarly morning
 Mike_Pence : survey frail bouncy stable salad
 test : ming chow cyber security expert
You may add/remove users and change passwords as you wish, but you are not allowed to edit 'test'. If you wish to
restore to the initial state where these 6 username/password pairs are the only credentials, exit the program, and then
run the program with 'python3 passwords.py reset'. Also, if you make edits using add/remove/change, those edits will
not be saved if you stop the program by force (with Ctrl-C or any other method), in order to save changes you must use
the command 'exit' from the main menu of the program!



The program -
This program requires the imports of numpy, hashlib, sys, and random.
The program has 3 main segments:
 - Imports, Globals, General Functions, Reading/Writing (Lines 1 - 167):
    Should be mostly understood from comments. Key functions are:
    - read_word_file : read a word list file
    - write_word_file : write a word list file
    - read_pass_file : read a credentials file
    - write_pass_file : write a credentials file
    - binary_for_index : binary search for an array (used on string arrays)
 - Credentials Management (Lines 168 - 248):
   Again, only a few important functions here. The only unclear function is:
   - encrypt_password : Take password and check validity of format and contents.
                        If not valid, return None as the encryption, and test for SQL keywords
                        If valid, return the encryption and an empty list of SQL keywords
 - Main (Lines 249 - 649):
   While this has a lot of code, it also commented as guidance and is more code than functionality. Important functions:
   - add_process : guided function for adding a new user
   - remove_process : guided function for removing an existing user
   - change_process : guided function for changing an existing user's password
   - login_process : guided function for verifying a username/password pair.
   - reset_function : restores the data in 'initial.txt' to 'passes.txt'
   - main : Loop instructions. Also processes the 'reset' command parameter.
The best way to understand how the system operates on the surface is to simply try it, by running 'python3 passwords.py'
Have fun!

- Matthew Jones

References for items in the program:
List of words came from 2 sources:
  http://www.desiquintans.com/nounlist
  https://gist.github.com/hugsy/8910dc78d208e40de42deb29e62df913
My wordlist came from combining these lists, and trimming it.
List of SQL reserved words came from:
  https://docs.intersystems.com/latest/csp/docbook/DocBook.UI.Page.cls?KEY=RSQL_reservedwords
